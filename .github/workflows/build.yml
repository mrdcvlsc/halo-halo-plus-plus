name: build

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]

jobs:
  build:
    permissions: write-all

    name: ${{ matrix.platform.name }} ${{ matrix.config.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows-MSVC-2019,  os: windows-2019,   folder: .\\build\\bin\\Release\\, zip: msvc-19.zip,      zipper: 7z a -tzip, unzip: tar -xf 4.11.0.zip -C .,                                 copy: robocopy /E /COPYALL test_folder .\\build\\bin\\Release\\test_folder, flags: -G "Visual Studio 16 2019" -A x64,            extension: .exe }
        - { name: Windows-MSVC-2022,  os: windows-2022,   folder: .\\build\\bin\\Release\\, zip: msvc-22.zip,      zipper: 7z a -tzip, unzip: tar -xf 4.11.0.zip -C .,                                 copy: robocopy /E /COPYALL test_folder .\\build\\bin\\Release\\test_folder, flags: -G "Visual Studio 17 2022" -A x64,            extension: .exe }
        - { name: MacOS-XCode-arm64,  os: macos-14,       folder: ./build/bin/,             zip: arm64-clang.zip,  zipper: zip -r,     unzip: unzip 4.11.0.zip -d ./,  cmake_conf: /lib/cmake/opencv4, copy: cp -r test_folder ./build/bin/test_folder }
        - { name: Ubuntu-24-Clang,    os: ubuntu-24.04,   folder: ./build/bin/,             zip: clang.zip,        zipper: zip -r,     unzip: unzip 4.11.0.zip -d ./,  cmake_conf: /lib/cmake/opencv4, copy: cp -r test_folder ./build/bin/test_folder, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        - { name: Ubuntu-22-Clang,    os: ubuntu-22.04,   folder: ./build/bin/,             zip: clang.zip,        zipper: zip -r,     unzip: unzip 4.11.0.zip -d ./,  cmake_conf: /lib/cmake/opencv4, copy: cp -r test_folder ./build/bin/test_folder, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        - { name: Ubuntu-20-Clang,    os: ubuntu-20.04,   folder: ./build/bin/,             zip: clang.zip,        zipper: zip -r,     unzip: unzip 4.11.0.zip -d ./,  cmake_conf: /lib/cmake/opencv4, copy: cp -r test_folder ./build/bin/test_folder, flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        config:
        - { name: static, flags: -DBUILD_SHARED_LIBS=OFF }
        - { name: shared, flags: -DBUILD_SHARED_LIBS=ON  }
        build:
        - { name: Release,        flags: -DCMAKE_BUILD_TYPE=Release }
        # - { name: Debug,          flags: -DCMAKE_BUILD_TYPE=Debug }
        # - { name: RelWithDebInfo, flags: -DCMAKE_BUILD_TYPE=RelWithDebInfo }
        # - { name: MinSizeRel,     flags: -DCMAKE_BUILD_TYPE=MinSizeRel }
        opencv:
        - { zip_version: 4.11.0.zip, folder_version: opencv-4.11.0  }

    steps:

    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install MacOS Dependencies
      if: runner.os == 'macOS'
      run: |
        brew update
        brew upgrade
        brew install tree

    - name: install linux ubuntu SFML dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev libopenblas-dev libgtk2.0-dev

    - name: install ultralytics
      run: |
        python --version
        pip install ultralytics
    
    - name: download OpenCV source
      run: curl -L -o ${{ matrix.opencv.zip_version }} https://github.com/opencv/opencv/archive/refs/tags/${{ matrix.opencv.zip_version }}

    - name: extract OpenCV sources
      run: ${{ matrix.platform.unzip }}

    - name: Get Cmake Version
      run: cmake --version

    - name: clone OpenCV-Contrib
      run: git clone https://github.com/opencv/opencv_contrib.git
       
    - name: cmake config OpenCV
      shell: bash
      run: |
        cd ${{ matrix.opencv.folder_version }}
        
        # full opencv library build
        # cmake -S . -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${{ matrix.build.flags }} -DOPENCV_EXTRA_MODULES_PATH="../opencv_contrib/modules" -DCMAKE_INSTALL_PREFIX="./build/install" -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_DOCS=OFF -DWITH_CUDA=OFF -DBUILD_EXAMPLES=OFF -DINSTALL_CREATE_DISTRIB=ON -DBUILD_opencv_apps=OFF -DOPENCV_ENABLE_ALLOCATOR_STATS=OFF -DOPENCV_FORCE_3RDPARTY_BUILD=ON
        # cmake -S . -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${{ matrix.build.flags }} -DOPENCV_EXTRA_MODULES_PATH="../opencv_contrib/modules" -DCMAKE_INSTALL_PREFIX="./build/install" -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_DOCS=OFF -DWITH_CUDA=OFF -DBUILD_EXAMPLES=OFF -DINSTALL_CREATE_DISTRIB=ON -DBUILD_opencv_apps=OFF -DOPENCV_ENABLE_ALLOCATOR_STATS=OFF
        
        # minimal library build
        cmake -S . -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${{ matrix.build.flags }} -DOPENCV_EXTRA_MODULES_PATH="../opencv_contrib/modules" -DCMAKE_INSTALL_PREFIX="./build/install" -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_DOCS=OFF -DWITH_CUDA=OFF -DBUILD_EXAMPLES=OFF -DINSTALL_CREATE_DISTRIB=ON -DOPENCV_ENABLE_ALLOCATOR_STATS=OFF -DOPENCV_FORCE_3RDPARTY_BUILD=ON

    - name: cmake Build OpenCV
      shell: bash
      run: |
        cd ${{ matrix.opencv.folder_version }}
        cmake --build build --config ${{ matrix.build.name }}

    - name: cmake Install OpenCV
      shell: bash
      run: |
        cd ${{ matrix.opencv.folder_version }}
        cmake --build build --target install --config ${{ matrix.build.name }}

    - name: verify OpenCV installation
      run: tree ${{ matrix.opencv.folder_version }}/build/install

    - name: configure project
      shell: bash
      run: |
        cmake --version
        cmake -S . -B build ${{ matrix.platform.flags }} ${{ matrix.config.flags }} ${{ matrix.build.flags }} -DOpenCV_DIR="./${{ matrix.opencv.folder_version }}/build/install${{ matrix.platform.cmake_conf }}"

    - name: Build ${{ matrix.platform.bin }} executable
      shell: bash
      run: cmake --build build --config ${{ matrix.build.name }}

    - name: Display Build Tree
      run: tree build

    - name: create test folder
      continue-on-error: true
      run: mkdir test_folder
      
    - name: download test files
      shell: bash
      run: make download-test-files

    - name: download ultralytics YOLOv11n model for testing
      run: python pt_to_torchscript.py

    - name: run test programs
      shell: bash
      env:
        DYLD_LIBRARY_PATH: ./opencv-4.11.0/build/install/lib/
      run: make test EXECUTABLE=${{ matrix.platform.folder }}${{ matrix.platform.bin }}draw_bounding_box${{ matrix.platform.extension }}

    - name: copy test folder to bin directory
      shell: pwsh
      run: |
        ${{ matrix.platform.copy }}
        
        if ($LASTEXITCODE -eq 1 -or $LASTEXITCODE -eq 0) {
          exit 0
        } else {
          exit $LASTEXITCODE
        }

    - name: copy YOLOv11n to the build/bin folder (Linux)
      if: runner.os == 'Linux'
      run: |
        cp yolo11n.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-96-in-dim.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-160-in-dim.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-320-in-dim.torchscript ${{ matrix.platform.folder }}

    - name: copy YOLOv11n to the build/bin folder (macOS)
      if: runner.os == 'macOS'
      run: |
        cp yolo11n.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-96-in-dim.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-160-in-dim.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-320-in-dim.torchscript ${{ matrix.platform.folder }}

    - name: copy YOLOv11n to the build/bin folder (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        robocopy . ${{ matrix.platform.folder }} yolo11n.torchscript /COPYALL
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 1) { exit $LASTEXITCODE }

        robocopy . ${{ matrix.platform.folder }} yolo11n-96-in-dim.torchscript /COPYALL
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 1) { exit $LASTEXITCODE }

        robocopy . ${{ matrix.platform.folder }} yolo11n-160-in-dim.torchscript /COPYALL
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 1) { exit $LASTEXITCODE }

        robocopy . ${{ matrix.platform.folder }} yolo11n-320-in-dim.torchscript /COPYALL
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 1) { exit $LASTEXITCODE }
        
        exit 0

    - name: compress ${{ matrix.platform.folder }} bin folder
      run: ${{ matrix.platform.zipper }} ${{ matrix.config.name }}-${{ matrix.platform.os }}-${{ matrix.platform.zip }} ${{ matrix.platform.folder }}

    - name: create github release and upload ${{ matrix.config.name }}-${{ matrix.platform.os }}-${{ matrix.platform.zip }}
      continue-on-error: true
      run: gh release create ${{ github.ref_name }} ${{ matrix.config.name }}-${{ matrix.platform.os }}-${{ matrix.platform.zip }} --title "${{ github.ref_name }}" --notes "Release notes for ${{ github.ref_name }}" --draft=false --prerelease=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload ${{ matrix.config.name }}-${{ matrix.platform.os }}-${{ matrix.platform.zip }} to release
      continue-on-error: true
      run: gh release upload ${{github.ref_name}} ${{ matrix.config.name }}-${{ matrix.platform.os }}-${{ matrix.platform.zip }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
