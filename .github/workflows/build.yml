name: build

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]

jobs:
  build:
    permissions: write-all

    name: ${{ matrix.platform.name }} ${{ matrix.config.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
            # - { name: Windows GCC,    os: windows-latest, folder: .\\build\\bin\\,          zip: windows-gcc.zip,   zipper: 7z a -tzip, flags: -G "Unix Makefiles" -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++, extension: .exe }
        - { name: Windows VS2019,       os: windows-2019,   folder: .\\build\\bin\\Release\\, zip: windows-VS19.zip,  zipper: 7z a -tzip, unzip: tar -xf 4.11.0.zip.zip -C ., copy: robocopy /E /COPYALL test_folder .\\build\\bin\\Release\\test_folder, flags: -G "Visual Studio 16 2019" -A x64, extension: .exe }
        - { name: Windows VS2022,       os: windows-2022,   folder: .\\build\\bin\\Release\\, zip: windows-VS22.zip,  zipper: 7z a -tzip, unzip: tar -xf 4.11.0.zip.zip -C ., copy: robocopy /E /COPYALL test_folder .\\build\\bin\\Release\\test_folder, flags: -G "Visual Studio 17 2022" -A x64, extension: .exe }
        - { name: Windows Clang,        os: windows-2022,   folder: .\\build\\bin\\,          zip: windows-clang.zip, zipper: 7z a -tzip, unzip: tar -xf 4.11.0.zip.zip -C ., copy: robocopy /E /COPYALL test_folder .\\build\\bin\\test_folder,          flags: -G "Visual Studio 17 2022" -A x64 -T ClangCL , extension: .exe }
        - { name: MacOS XCode - arm64,  os: macos-14,       folder: ./build/bin/,             zip: mac-arm64.zip,     zipper: zip -r,     unzip: unzip 4.11.0.zip.zip -d ./,  copy: cp -r test_folder ./build/bin/test_folder }
        - { name: MacOS XCode - x86-64, os: macos-13,       folder: ./build/bin/,             zip: mac-x86-64.zip,    zipper: zip -r,     unzip: unzip 4.11.0.zip.zip -d ./,  copy: cp -r test_folder ./build/bin/test_folder }
        - { name: Linux GCC,            os: ubuntu-24.04,   folder: ./build/bin/,             zip: ubuntu-gcc.zip,    zipper: zip -r,     unzip: unzip 4.11.0.zip.zip -d ./,  copy: cp -r test_folder ./build/bin/test_folder }
        - { name: Linux Clang,          os: ubuntu-24.04,   folder: ./build/bin/,             zip: ubuntu-clang.zip,  zipper: zip -r,     unzip: unzip 4.11.0.zip.zip -d ./,  copy: cp -r test_folder ./build/bin/test_folder,       flags: -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ }
        config:
        - { name: static, flags: -DBUILD_SHARED_LIBS=FALSE }
        # - { name: shared, flags: -DBUILD_SHARED_LIBS=TRUE }
        build:
        - { name: Release,        flags: -DCMAKE_BUILD_TYPE=Release }
        # - { name: Debug,          flags: -DCMAKE_BUILD_TYPE=Debug }
        # - { name: RelWithDebInfo, flags: -DCMAKE_BUILD_TYPE=RelWithDebInfo }
        # - { name: MinSizeRel,     flags: -DCMAKE_BUILD_TYPE=MinSizeRel }
        opencv:
        - { zip_version: 4.11.0.zip, folder_version: opencv-4.11.0  }

    steps:

    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: display python version
      run: |
        python3 --version

    - name: install numpy and torch if possible
      continue-on-error: true
      run: |
        python3 --version
        pip install numpy torch torchvision torchaudio

    - name: install ultralytics
      run: |
        python3 --version
        pip install ultralytics

    - name: install linux SFML dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install libxrandr-dev libxcursor-dev libxi-dev libudev-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libfreetype-dev libopenblas-dev

    - name: Install MacOS Dependencies
      if: runner.os == 'macOS'
      run: brew install tree openblas

    - name: install openblas in windows if possible
      if: runner.os == 'Windows'
      continue-on-error: true
      run: vcpkg install openblas

    - name: download OpenCV source
      run: curl -L -o ${{ matrix.opencv.zip_version }} https://github.com/opencv/opencv/archive/refs/tags/${{ matrix.opencv.zip_version }}

    - name: extract OpenCV sources
      run: ${{ matrix.platform.unzip }}

    - name: clone OpenCV-Contrib
      run: git clone https://github.com/opencv/opencv_contrib.git
       
    - name: cmake config OpenCV
      run: |
        cd ${{ matrix.opencv.folder_version }}
        cmake -S . -B build ${{matrix.platform.flags}} ${{matrix.config.flags}} ${{matrix.build.flags}} -DOPENCV_EXTRA_MODULES_PATH="../opencv_contrib/modules" -DCMAKE_INSTALL_PREFIX="build/install" -DBUILD_PERF_TESTS=OFF -DBUILD_TESTS=OFF -DBUILD_DOCS=OFF  -DWITH_CUDA=OFF -DBUILD_EXAMPLES=OFF -DINSTALL_CREATE_DISTRIB=ON

    - name: cmake Build OpenCV
      run: |
        cd ${{ matrix.opencv.folder_version }}
        cmake --build build --config Release

    - name: cmake Install OpenCV
      run: |
        cd ${{ matrix.opencv.folder_version }}
        cmake --build build --target install --config Release

    - name: verify OpenCV installation
      if: runner.os == 'Windows'
      run: dir ${{ matrix.opencv.folder_version }}\build\install

    - name: configure project
      run: cmake -S . -B build -DCMAKE_INSTALL_PREFIX=install -DOpenCV_DIR=./${{ matrix.opencv.folder_version }}/build/install ${{matrix.platform.flags}} ${{matrix.config.flags}} ${{matrix.build.flags}}

    - name: Build ${{matrix.platform.bin}} executable
      run: cmake --build build --config ${{matrix.build.name}}

    - name: Display Build Tree
      run: tree build

    - name: create test folder
      continue-on-error: true
      run: mkdir test_folder
      
    - name: download test files
      run: make download-test-files

    - name: download ultralytics YOLOv11n model for testing
      run: python pt_to_torchscript.py

    - name: run test programs
      run: make test EXECUTABLE=${{ matrix.platform.folder }}${{matrix.platform.bin}}draw_bounding_box${{matrix.platform.extension}}

    - name: copy test folder to bin directory
      shell: pwsh
      run: |
        ${{ matrix.platform.copy }}
        
        if ($LASTEXITCODE -eq 1 -or $LASTEXITCODE -eq 0) {
          exit 0
        } else {
          exit $LASTEXITCODE
        }

    - name: copy YOLOv11n to the build/bin folder (Linux)
      if: runner.os == 'Linux'
      run: |
        cp yolo11n.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-96-in-dim.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-160-in-dim.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-320-in-dim.torchscript ${{ matrix.platform.folder }}

    - name: copy YOLOv11n to the build/bin folder (macOS)
      if: runner.os == 'macOS'
      run: |
        cp yolo11n.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-96-in-dim.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-160-in-dim.torchscript ${{ matrix.platform.folder }}
        cp yolo11n-320-in-dim.torchscript ${{ matrix.platform.folder }}

    - name: copy YOLOv11n to the build/bin folder (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        robocopy . ${{ matrix.platform.folder }} yolo11n.torchscript /COPYALL
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 1) { exit $LASTEXITCODE }

        robocopy . ${{ matrix.platform.folder }} yolo11n-96-in-dim.torchscript /COPYALL
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 1) { exit $LASTEXITCODE }

        robocopy . ${{ matrix.platform.folder }} yolo11n-160-in-dim.torchscript /COPYALL
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 1) { exit $LASTEXITCODE }

        robocopy . ${{ matrix.platform.folder }} yolo11n-320-in-dim.torchscript /COPYALL
        if ($LASTEXITCODE -ne 0 -and $LASTEXITCODE -ne 1) { exit $LASTEXITCODE }
        
        exit 0

    - name: compress ${{matrix.platform.folder}} bin folder
      run: ${{matrix.platform.zipper}} ${{matrix.platform.zip}} ${{matrix.platform.folder}}

    - name: create github release and upload ${{matrix.platform.zip}}
      continue-on-error: true
      run: gh release create ${{github.ref_name}} ${{matrix.platform.zip}} --title "${{github.ref_name}}" --notes "Release notes for ${{github.ref_name}}" --draft=false --prerelease=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload ${{matrix.platform.zip}} to release
      continue-on-error: true
      run: gh release upload ${{github.ref_name}} ${{matrix.platform.zip}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
